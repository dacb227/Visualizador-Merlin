<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" xmlns:util="views.util.*">
	
	<mx:Script>
		<![CDATA[
			import com.util.restriccionesXML;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.containers.HDividedBox;
			import mx.containers.Panel;
			import mx.containers.TitleWindow;
			import mx.containers.VBox;
			import mx.containers.VDividedBox;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.ComboBox;
			import mx.controls.DateField;
			import mx.controls.HRule;
			import mx.controls.Label;
			import mx.controls.Tree;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.controls.listClasses.ListBase;
			import mx.core.Application;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.ListEvent;
			import mx.managers.CursorManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import views.util.FolderStructure;
			import views.util.GridExtended;
			import views.util.GridPlayerExtended;
			import views.util.ReportManagerEvent;
			
			private var wsdl:String;
			private var gridextended:GridPlayerExtended;		
			private var box:HDividedBox;
			private var tree:FolderStructure;
			private var vbox:VBox;	
			private var closeDate:DateField
			private var category:ComboBox;
			private var currentStatus:ComboBox;
			public var xmlrestricciones:XML = new XML();
			private var user:String;
			
			public function init(wsdl:String):void{
				user = Application.application.parameters.user;
				tree = new FolderStructure;
				box = new HDividedBox;
				gridextended = new GridPlayerExtended;
				vbox = new VBox;
				
				box.percentHeight = 100;
				box.percentWidth = 100;
				
				gridextended.percentHeight = 100;
				gridextended.percentWidth = 100;
				gridextended.doubleClickEnabled = true;
				gridextended.addEventListener(ListEvent.ITEM_DOUBLE_CLICK, beginEdit);
				addEventListener(ContextMenuEvent.MENU_ITEM_SELECT,copyDataHandler);

				addEventListener(ReportManagerEvent.UPDATE, saveChanges);
				addEventListener(ReportManagerEvent.SELECT_DATE, checkCloseDate);
				
				vbox.percentHeight = 100;
				vbox.setStyle("paddingTop","10");
				vbox.maxWidth = 0;
				
				addChild(tree);
				box.addChild(gridextended);
				box.addChild(vbox);
				addChild(box);
				
				webService.wsdl = wsdl;
				webService.loadWSDL();
				webService.getfolders(user);
				webService.getclasses();
				webService.getstatus();
			}
			
			private function copyDataHandler(event:Event):void{
				var dataToCopy:String = '';
				if(gridextended.selectedItems != null){
					dataToCopy = getSelectedRowsData('RUT');
					System.setClipboard(dataToCopy);
				}  			
			}
			
			private function getSelectedRowsData(value:String):String{
				var rowsData : String = '';
				var tempxml:XML;
				var tempxmllist:XMLListCollection;
				
				for(var i:int = gridextended.selectedItems.length-1 ;i>=0;i--) {
					for(var j:int = 0; j< gridextended.columnCount; j++){
						if((gridextended.columns[j] as DataGridColumn).visible){
							tempxml = new XML(gridextended.selectedItems[i]);
							tempxmllist = new XMLListCollection(tempxml.children());
							if( (gridextended.columns[j] as DataGridColumn).headerText == value)//  tempxml.value.@column[j] )
								rowsData += tempxml.value[j];					
						}
					}
				}
				return rowsData;
			}
			
			public function initCategory(xml:XML):void{
				var listxml:XMLList = new XMLList(xml.items);
				category = new ComboBox;
				category.dataProvider = listxml.item;
			}
			
			public function initStatus(xml:XML):void{
				var listxml:XMLList = new XMLList(xml.items);
				currentStatus = new ComboBox;
				currentStatus.dataProvider = listxml.item;
			}
			
			public function beginEdit(evt:ListEvent):void{
				vbox.removeAllChildren();
				vbox.maxWidth = 200;
				vbox.minWidth = 200;
				box.moveDivider(0, -200);
				constructInfo(new XMLList(evt.currentTarget.selectedItem));
			}
			
			private function constructInfo(xml:XMLList):void{
				var closeDate_label:Label = new Label;
				var category_label:Label = new Label;
				var currentStatus_label:Label = new Label;
				var save_button:Button = new Button
				var cancel_button:Button = new Button
				var hbox:HBox = new HBox;
				var vbox2:VBox = new VBox;
				var line:HRule = new HRule;
				closeDate = new DateField;
				
				hbox.percentHeight = 100;
				hbox.percentWidth = 100;
				line.width = 190;
				
				hbox.setStyle("horizontalAlign", "center");
				vbox2.setStyle("paddingTop", "20");
				closeDate_label.setStyle("fontWeight","bold");
				category_label.setStyle("fontWeight","bold");
				currentStatus_label.setStyle("fontWeight","bold");
				
				closeDate.formatString = "YYYY-MM-DD";
				closeDate_label.text = "FECHA CIERRE:";
				category_label.text = "CATEGORIA:";
				currentStatus_label.text = "ESTATUS:";
				save_button.label = "Guardar";
				cancel_button.label = "Cancelar";
				
				hbox.addChild(cancel_button);
				hbox.addChild(save_button);
				vbox2.addChild(line);
				vbox2.addChild(hbox);
				
				vbox.addChild(closeDate_label);
				vbox.addChild(closeDate);
				vbox.addChild(currentStatus_label);
				vbox.addChild(currentStatus);
				vbox.addChild(vbox2);
				
				var tmp:XMLListCollection = new XMLListCollection(xml.value);
				var stat:String = tmp.getItemAt(6).toString();
				var count:int = 0;
				
				if(stat ==  'Cerrado'){
					currentStatus.enabled = false;
					closeDate.enabled = false;
					save_button.enabled = false;
				}else{
					currentStatus.enabled = true;
					closeDate.enabled = true;
					save_button.enabled = true;
				}
				
				category.selectedIndex = count;
				count = 0;
				for each (var i in XMLListCollection(currentStatus.dataProvider)){
					if(i.toString() === stat)
						break;	
					count++;
				}
				currentStatus.selectedIndex = count; 
				
				var delivered:String = tmp.getItemAt(4).toString().substr(0,10); //FECHA LLEGADA CORREO
				var close_string:String = tmp.getItemAt(7).toString().substr(0,10); //FECHA CIERRE
				
				var yesterday:Date = new Date(delivered.substr(0,4), Number(delivered.substr(5,2))-1, Number(delivered.substr(8,2))-1);  
				closeDate.disabledRanges = [{rangeEnd:yesterday}];  		
				closeDate.text = close_string; 
				closeDate.addEventListener(CalendarLayoutChangeEvent.CHANGE, function temp(evt:CalendarLayoutChangeEvent):void{
					dispatchEvent(new ReportManagerEvent(ReportManagerEvent.SELECT_DATE, {data:delivered,update:evt.currentTarget.text}));
				});
				save_button.addEventListener(MouseEvent.CLICK, function temp():void{
					if(closeDate.text == '' && currentStatus.selectedLabel == 'Cerrado'){
						var text_alert:String = "Por favor ingrese una fecha de cierre";
						Alert.okLabel = "Cerrar";
						Alert.show(text_alert,"",Alert.OK,null,null);
						Alert.okLabel = "Ok";
					}else{
						dispatchEvent(new ReportManagerEvent(ReportManagerEvent.UPDATE, {data:xml,update:""}));
					}
				});
				cancel_button.addEventListener(MouseEvent.CLICK, function close():void{
					vbox.minWidth = 0;
					vbox.maxWidth = 0;});
			}
			
			public function checkCloseDate(evt:ReportManagerEvent):void{
				var old_date:String = evt.data.data;
				var new_date:String = evt.data.update;
				if(old_date>new_date){
					closeDate.text = null;
				}
			}
			
			public function saveChanges(evt:ReportManagerEvent):void{
				var id:String = evt.data.data.@id;
				var cat:String = category.selectedLabel;
				var stat:String = currentStatus.selectedLabel;
				var close:String = closeDate.text;
				webService.updatedata(id,stat,close, user);			
				vbox.minWidth = 0;
				vbox.maxWidth = 0;
			}
			
			public function dataLoaded(xml:XML):void{
				xmlrestricciones = parentDocument.restrictionsXML;
				gridextended.dataLoaded(xml);
				CursorManager.removeBusyCursor();
			}
			
			public function getfolders_result(evt:ResultEvent):void{
				xmlrestricciones = parentDocument.restrictionsXML;
				tree.loadStructure(new XML(evt.result));
				//CursorManager.removeBusyCursor();
			}
			
			public function getfolders_fault(evt:FaultEvent):void{
				Alert.show(evt.fault.toString());
				CursorManager.removeBusyCursor();
			}
			
			public function getclasses_result(evt:ResultEvent):void{
				var xml:XML = new XML(evt.result);
				//Alert.show(xml.toXMLString());
				initCategory(xml);
			}
			
			public function getclasses_fault(evt:FaultEvent):void{
				Alert.show(evt.fault.toString());
			}
			
			public function getstatus_result(evt:ResultEvent):void{
				var xml:XML = new XML(evt.result);
				initStatus(xml);
			}
			
			public function getstatus_fault(evt:FaultEvent):void{
				Alert.show(evt.fault.toString());
			}
			
			public function getdataxml_result(evt:ResultEvent):void{
				var xml:XML = new XML(evt.result);
				dataLoaded(xml);
			}
			
			public function getdataxml_fault(evt:FaultEvent):void{
				Alert.show(evt.fault.toString());
				CursorManager.removeBusyCursor();
			}
			
			public function updatedata_result(evt:ResultEvent):void{
				xmlrestricciones = parentDocument.restrictionsXML;
				parentDocument.loadRecords(xmlrestricciones);
				webService.getfolders(user);
			}
			
			public function updatedata_fault(evt:FaultEvent):void{
				//Alert.show(evt.fault.toString());
				xmlrestricciones = parentDocument.restrictionsXML;
				parentDocument.loadRecords(xmlrestricciones);
				webService.getfolders(user);
			}
			
			public function reloadFolderStructure():void{
				webService.getfolders(user);
			}
			
			public function requestData():void{
				CursorManager.setBusyCursor();
				//Alert.show(xmlrestricciones.toXMLString());
				webService.getdataxml('','',xmlrestricciones,user,'');
			}
			
		]]>
	</mx:Script>
	
	<mx:WebService 
		id="webService">
		<mx:operation
			name="getfolders"
			result="getfolders_result(event)"
			fault="getfolders_fault(event)"
			/>
		<mx:operation
			name="getclasses"
			result="getclasses_result(event)"
			fault="getclasses_fault(event)"
			/>
		<mx:operation
			name="getstatus"
			result="getstatus_result(event)"
			fault="getstatus_fault(event)"
			/>
		<mx:operation
			name="getdataxml"
			result="getdataxml_result(event)"
			fault="getdataxml_fault(event)"
			/>
		<mx:operation
			name="updatedata"
			result="updatedata_result(event)"
			fault="updatedata_fault(event)"
			/>
	</mx:WebService> 
	
</mx:HBox>
